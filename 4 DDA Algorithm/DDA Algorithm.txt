#include<stdio.h>
#include<math.h>
#include<GL/glu.h>
#include<GL/glut.h>

void display(void)
{
    glClear (GL_COLOR_BUFFER_BIT);

    float x = 0.0;
    float y = 0.0;
    float xn = 50.0;
    float yn = 60.0;
    float dx = xn - x;
    float dy = yn - y;
    float m = dy / dx;
    float xk = x;
    float yk = y;

    if(m < 1.0)
    {
        while(xk <= xn && yk <= yn)
        {
            xk = xk + 1;
            yk  = yk + m;
            glColor3f(0.0, 1.0, 1.0);
            glBegin(GL_POINTS);
            printf("\n%f    %f",xk,yk);
            glVertex2f(roundf(xk), round(yk));
            glEnd();
        }
        glFlush();
    }

    else if(m > 1.0)
    {
        while(xk <= xn && yk <= yn)
        {
            xk = xk + 1/m;
            yk  = yk + 1;
            glColor3f(0.0, 1.0, 1.0);
            glBegin(GL_POINTS);
            printf("\n%f    %f",xk,yk);
            glVertex2f(roundf(xk), round(yk));
            glEnd();
        }
        glFlush();
    }

    else if(m == 1.0)
    {
        while(xk <= xn && yk <= yn)
        {
            xk = xk + 1;
            yk  = yk + 1;
            glColor3f(0.0, 1.0, 1.0);
            glBegin(GL_POINTS);
            printf("\n%f    %f",xk,yk);
            glVertex2f(roundf(xk), round(yk));
            glEnd();
        }
        glFlush();
    }

    else if(-1 <=m <= 0)
    {
        while(xk <= xn && yk <= yn)
        {
            xk = xk - 1;
            yk  = yk - m;
            glColor3f(0.0, 1.0, 1.0);
            glBegin(GL_POINTS);
            printf("\n%f    %f",xk,yk);
            glVertex2f(roundf(xk), round(yk));
            glEnd();
        }
        glFlush();
    }

    else if(m < -1.0)
    {
        while(xk <= xn && yk <= yn)
        {
            xk = xk - 1/m;
            yk  = yk - 1;
            glColor3f(0.0, 1.0, 1.0);
            glBegin(GL_POINTS);
            printf("\n%f    %f",xk,yk);
            glVertex2f(roundf(xk), round(yk));
            glEnd();
        }
        glFlush();
    }

}
void init(void)
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, 100.0, 0.0, 100.0, -1.0, 1.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("DDA Algorithm");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
